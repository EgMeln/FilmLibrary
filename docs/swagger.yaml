definitions:
  model.Actor:
    properties:
      birthDate:
        description: Birth date of the actor
        type: string
      gender:
        description: Gender of the actor
        type: string
      id:
        description: Unique identifier of the actor
        type: string
      name:
        description: Name of the actor
        type: string
    type: object
  model.ActorMovies:
    properties:
      birthDate:
        description: Birth date of the actor
        type: string
      gender:
        description: Gender of the actor
        type: string
      id:
        description: Unique identifier of the actor
        type: string
      movies:
        items:
          $ref: '#/definitions/model.Movie'
        type: array
      name:
        description: Name of the actor
        type: string
    type: object
  model.Movie:
    properties:
      actors:
        description: List of actors starring in the movie
        items:
          $ref: '#/definitions/model.Actor'
        type: array
      description:
        description: Description of the movie
        type: string
      id:
        description: Unique identifier of the movie
        type: string
      rating:
        description: Rating of the movie
        type: integer
      releaseDate:
        description: Release date of the movie
        type: string
      title:
        description: Title of the movie
        type: string
    type: object
info:
  contact: {}
paths:
  /actors/create:
    post:
      consumes:
      - application/json
      description: Create a new actor in the film library
      parameters:
      - description: Actor object to be created
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/model.Actor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Failed to decode request body
          schema:
            type: string
        "500":
          description: Failed to create actor
          schema:
            type: string
      summary: Create a new actor
      tags:
      - Actors
  /actors/delete:
    delete:
      consumes:
      - application/json
      description: Delete an actor from the film library by ID
      parameters:
      - description: ID of the actor to be deleted
        in: query
        name: actor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid actor ID
          schema:
            type: string
        "500":
          description: Failed to delete actor
          schema:
            type: string
      summary: Delete an actor
      tags:
      - Actors
  /actors/getAllWithMovies:
    get:
      consumes:
      - application/json
      description: Retrieve all actors from the film library along with their associated
        movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ActorMovies'
            type: array
        "500":
          description: Failed to fetch actors with movies
          schema:
            type: string
      summary: Retrieve all actors with associated movies
      tags:
      - Actors
  /actors/update:
    put:
      consumes:
      - application/json
      description: Update an existing actor in the film library
      parameters:
      - description: ID of the actor to be updated
        in: query
        name: actor_id
        required: true
        type: string
      - description: Actor object with updated information
        in: body
        name: actor
        required: true
        schema:
          $ref: '#/definitions/model.Actor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Failed to decode request body
          schema:
            type: string
        "500":
          description: Failed to update actor
          schema:
            type: string
      summary: Update an existing actor
      tags:
      - Actors
  /login:
    post:
      consumes:
      - application/json
      description: Log in an existing user with a username and password
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            type: string
        "400":
          description: Unable to decode request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login
      tags:
      - users
  /movies/create:
    post:
      consumes:
      - application/json
      description: Create a new movie with the provided details
      parameters:
      - description: Movie object to be created
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: Movie created successfully
          schema:
            type: string
        "400":
          description: Failed to decode request body
          schema:
            type: string
        "500":
          description: Failed to create movie
          schema:
            type: string
      summary: Create a new movie
      tags:
      - movies
  /movies/delete:
    delete:
      consumes:
      - application/json
      description: Delete an existing movie by its ID
      parameters:
      - description: ID of the movie to be deleted
        in: query
        name: movie_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movie deleted successfully
          schema:
            type: string
        "400":
          description: Invalid movie ID
          schema:
            type: string
        "500":
          description: Failed to delete movie
          schema:
            type: string
      summary: Delete a movie
      tags:
      - movies
  /movies/getAllWithSorting:
    get:
      consumes:
      - application/json
      description: Retrieve all movies with sorting based on the provided flag
      parameters:
      - description: Sorting flag
        in: query
        name: flag
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            type: string
        "400":
          description: Invalid sorting flag
          schema:
            type: string
        "500":
          description: Failed to fetch movies with sorting
          schema:
            type: string
      summary: Get all movies with sorting
      tags:
      - movies
  /movies/getByActorNameFragment:
    get:
      consumes:
      - application/json
      description: Retrieve movies associated with actors whose name matches the provided
        fragment
      parameters:
      - description: Actor name fragment
        in: query
        name: actor_name_fragment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            type: string
        "500":
          description: Failed to fetch movies by actor name fragment
          schema:
            type: string
      summary: Get movies by actor name fragment
      tags:
      - movies
  /movies/getByTitleFragment:
    get:
      consumes:
      - application/json
      description: Retrieve movies that match the provided title fragment
      parameters:
      - description: Title fragment
        in: query
        name: title_fragment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            type: string
        "500":
          description: Failed to fetch movies by title fragment
          schema:
            type: string
      summary: Get movies by title fragment
      tags:
      - movies
  /movies/update:
    put:
      consumes:
      - application/json
      description: Update an existing movie with the provided details
      parameters:
      - description: ID of the movie to be updated
        in: query
        name: movie_id
        required: true
        type: string
      - description: Updated movie object
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            type: string
        "400":
          description: Invalid movie ID or failed to decode request body
          schema:
            type: string
        "500":
          description: Failed to update movie
          schema:
            type: string
      summary: Update a movie
      tags:
      - movies
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with a username and password
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Failed to parse form or username and password are required
          schema:
            type: string
        "500":
          description: Failed to create user
          schema:
            type: string
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
