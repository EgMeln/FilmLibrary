// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/actors/create": {
            "post": {
                "description": "Create a new actor in the film library",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Create a new actor",
                "parameters": [
                    {
                        "description": "Actor object to be created",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Actor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to decode request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create actor",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/actors/delete": {
            "delete": {
                "description": "Delete an actor from the film library by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Delete an actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the actor to be deleted",
                        "name": "actor_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid actor ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete actor",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/actors/getAllWithMovies": {
            "get": {
                "description": "Retrieve all actors from the film library along with their associated movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Retrieve all actors with associated movies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ActorMovies"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch actors with movies",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/actors/update": {
            "put": {
                "description": "Update an existing actor in the film library",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actors"
                ],
                "summary": "Update an existing actor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the actor to be updated",
                        "name": "actor_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Actor object with updated information",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Actor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to decode request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update actor",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Log in an existing user with a username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login",
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unable to decode request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/create": {
            "post": {
                "description": "Create a new movie with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Create a new movie",
                "parameters": [
                    {
                        "description": "Movie object to be created",
                        "name": "movie",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Movie"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to decode request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create movie",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/delete": {
            "delete": {
                "description": "Delete an existing movie by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Delete a movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the movie to be deleted",
                        "name": "movie_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid movie ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete movie",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/getAllWithSorting": {
            "get": {
                "description": "Retrieve all movies with sorting based on the provided flag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get all movies with sorting",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sorting flag",
                        "name": "flag",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid sorting flag",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch movies with sorting",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/getByActorNameFragment": {
            "get": {
                "description": "Retrieve movies associated with actors whose name matches the provided fragment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by actor name fragment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actor name fragment",
                        "name": "actor_name_fragment",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch movies by actor name fragment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/getByTitleFragment": {
            "get": {
                "description": "Retrieve movies that match the provided title fragment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies by title fragment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title fragment",
                        "name": "title_fragment",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch movies by title fragment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies/update": {
            "put": {
                "description": "Update an existing movie with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Update a movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the movie to be updated",
                        "name": "movie_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated movie object",
                        "name": "movie",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Movie"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid movie ID or failed to decode request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update movie",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with a username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to parse form or username and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Actor": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "Birth date of the actor",
                    "type": "string"
                },
                "gender": {
                    "description": "Gender of the actor",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the actor",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the actor",
                    "type": "string"
                }
            }
        },
        "model.ActorMovies": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "Birth date of the actor",
                    "type": "string"
                },
                "gender": {
                    "description": "Gender of the actor",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the actor",
                    "type": "string"
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Movie"
                    }
                },
                "name": {
                    "description": "Name of the actor",
                    "type": "string"
                }
            }
        },
        "model.Movie": {
            "type": "object",
            "properties": {
                "actors": {
                    "description": "List of actors starring in the movie",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Actor"
                    }
                },
                "description": {
                    "description": "Description of the movie",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier of the movie",
                    "type": "string"
                },
                "rating": {
                    "description": "Rating of the movie",
                    "type": "integer"
                },
                "releaseDate": {
                    "description": "Release date of the movie",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the movie",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
